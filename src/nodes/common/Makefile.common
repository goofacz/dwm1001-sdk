TARGETS          := nrf52832_xxaa
OUTPUT_DIRECTORY := _build
DEBUG_BUILD      ?= 0

NRF_SDK_ROOT = ${PROJECT_ROOT}/nrfsdk/nRF5_SDK_15.2.0_9412b96
DECA_DRIVER_ROOT = ${PROJECT_ROOT}/deca_driver/decadriver

$(OUTPUT_DIRECTORY)/nrf52832_xxaa.out: \
  LINKER_SCRIPT  := $(PROJECT_ROOT)/src/nodes/common/nrf52.ld

# Source files common to all targets
SRC_FILES += \
  ${NRF_SDK_ROOT}/modules/nrfx/mdk/gcc_startup_nrf52.S \
  ${NRF_SDK_ROOT}/components/libraries/util/app_error.c \
  ${NRF_SDK_ROOT}/components/libraries/util/app_error_handler_gcc.c \
  ${NRF_SDK_ROOT}/components/libraries/util/app_error_weak.c \
  ${NRF_SDK_ROOT}/components/libraries/scheduler/app_scheduler.c \
  ${NRF_SDK_ROOT}/components/libraries/timer/app_timer.c \
  ${NRF_SDK_ROOT}/components/libraries/util/app_util_platform.c \
  ${NRF_SDK_ROOT}/components/libraries/atomic_fifo/nrf_atfifo.c \
  ${NRF_SDK_ROOT}/components/libraries/atomic_flags/nrf_atflags.c \
  ${NRF_SDK_ROOT}/components/libraries/atomic/nrf_atomic.c \
  ${NRF_SDK_ROOT}/components/libraries/pwr_mgmt/nrf_pwr_mgmt.c \
  ${NRF_SDK_ROOT}/components/libraries/ringbuf/nrf_ringbuf.c \
  ${NRF_SDK_ROOT}/components/libraries/experimental_section_vars/nrf_section_iter.c \
  ${NRF_SDK_ROOT}/modules/nrfx/mdk/system_nrf52.c \
  ${NRF_SDK_ROOT}/components/boards/boards.c \
  ${NRF_SDK_ROOT}/modules/nrfx/drivers/src/nrfx_clock.c \
  ${NRF_SDK_ROOT}/modules/nrfx/drivers/src/nrfx_gpiote.c \
  ${NRF_SDK_ROOT}/modules/nrfx/drivers/src/prs/nrfx_prs.c \
  ${NRF_SDK_ROOT}/components/ble/common/ble_advdata.c \
  ${NRF_SDK_ROOT}/components/ble/common/ble_conn_params.c \
  ${NRF_SDK_ROOT}/components/ble/common/ble_conn_state.c \
  ${NRF_SDK_ROOT}/components/ble/common/ble_srv_common.c \
  ${NRF_SDK_ROOT}/components/ble/ble_advertising/ble_advertising.c \
  ${NRF_SDK_ROOT}/components/ble/nrf_ble_gatt/nrf_ble_gatt.c \
  ${NRF_SDK_ROOT}/components/ble/nrf_ble_qwr/nrf_ble_qwr.c \
  ${NRF_SDK_ROOT}/components/softdevice/common/nrf_sdh.c \
  ${NRF_SDK_ROOT}/components/softdevice/common/nrf_sdh_ble.c \
  ${NRF_SDK_ROOT}/components/softdevice/common/nrf_sdh_soc.c \
  ${NRF_SDK_ROOT}/modules/nrfx/drivers/src/nrfx_uarte.c \
  ${NRF_SDK_ROOT}/modules/nrfx/drivers/src/nrfx_uart.c \
  ${NRF_SDK_ROOT}/modules/nrfx/drivers/src/nrfx_spim.c \
  ${NRF_SDK_ROOT}/integration/nrfx/legacy/nrf_drv_uart.c \
  ${NRF_SDK_ROOT}/components/libraries/memobj/nrf_memobj.c \
  ${NRF_SDK_ROOT}/components/libraries/balloc/nrf_balloc.c \
  ${NRF_SDK_ROOT}/components/libraries/scheduler/app_scheduler.c \
  ${NRF_SDK_ROOT}/components/libraries/queue/nrf_queue.c \
  $(DECA_DRIVER_ROOT)/deca_device.c \
  $(DECA_DRIVER_ROOT)/deca_params_init.c \
  $(PROJECT_ROOT)/src/nodes/common/bluetooth.cpp \
  $(PROJECT_ROOT)/src/nodes/common/dw1000.cpp \
  $(PROJECT_ROOT)/src/nodes/common/utilities.cpp \
  $(PROJECT_ROOT)/src/nodes/common/cli.cpp \
  $(PROJECT_ROOT)/src/nodes/common/core.cpp

# Include folders common to all targets
INC_FOLDERS += \
  $(PROJECT_ROOT)/gsl/include \
  ${NRF_SDK_ROOT}/components/libraries/bsp \
  ${NRF_SDK_ROOT}/modules/nrfx/hal \
  ${NRF_SDK_ROOT}/components/libraries/log \
  ${NRF_SDK_ROOT}/components/libraries/mutex \
  ${NRF_SDK_ROOT}/components/libraries/gpiote \
  ${NRF_SDK_ROOT}/components/boards \
  ${NRF_SDK_ROOT}/components/ble/ble_advertising \
  ${NRF_SDK_ROOT}/components/ble/ble_services/ble_bas_c \
  ${NRF_SDK_ROOT}/modules/nrfx/drivers/include \
  ${NRF_SDK_ROOT}/components/libraries/pwr_mgmt \
  ${NRF_SDK_ROOT}/components/toolchain/cmsis/include \
  ${NRF_SDK_ROOT}/components/ble/common \
  ${NRF_SDK_ROOT}/components/libraries/experimental_section_vars \
  ${NRF_SDK_ROOT}/components/softdevice/s132/headers \
  ${NRF_SDK_ROOT}/components/libraries/delay \
  ${NRF_SDK_ROOT}/components/softdevice/common \
  ${NRF_SDK_ROOT}/components/libraries/atomic \
  ${NRF_SDK_ROOT}/components/libraries/util \
  ${NRF_SDK_ROOT}/components/libraries/timer \
  ${NRF_SDK_ROOT}/integration/nrfx \
  ${NRF_SDK_ROOT}/modules/nrfx/mdk \
  ${NRF_SDK_ROOT}/components/libraries/strerror \
  ${NRF_SDK_ROOT}/components/libraries/ringbuf \
  ${NRF_SDK_ROOT}/components/ble/nrf_ble_gatt \
  ${NRF_SDK_ROOT}/components/ble/nrf_ble_qwr \
  ${NRF_SDK_ROOT}/components/libraries/button \
  ${NRF_SDK_ROOT}/modules/nrfx \
  ${NRF_SDK_ROOT}/integration/nrfx/legacy \
  ${NRF_SDK_ROOT}/components/libraries/atomic_flags \
  ${NRF_SDK_ROOT}/components/libraries/log/src \
  ${NRF_SDK_ROOT}/components/libraries/memobj \
  ${NRF_SDK_ROOT}/components/libraries/balloc \
  ${NRF_SDK_ROOT}/components/libraries/scheduler \
  ${NRF_SDK_ROOT}/external/fprintf \
  ${NRF_SDK_ROOT}/components/libraries/queue \
  $(DECA_DRIVER_ROOT) \
  $(PROJECT_ROOT)/src/nodes/common
  
# Libraries common to all targets
LIB_FILES += \

# C flags common to all targets
CFLAGS += $(OPT)
CFLAGS += -DGIT_COMMIT=\"$(shell git show -s --format=%h)\"
CFLAGS += -DCUSTOM_BOARD_INC=dwm1001_board
CFLAGS += -DCONFIG_GPIO_AS_PINRESET
CFLAGS += -DFLOAT_ABI_HARD
CFLAGS += -DNRF52
CFLAGS += -DNRF52832_XXAA
CFLAGS += -DNRF52_PAN_74
CFLAGS += -DNRF_SD_BLE_API_VERSION=6
CFLAGS += -DS132
CFLAGS += -DSOFTDEVICE_PRESENT
CFLAGS += -DSWI_DISABLE0
CFLAGS += -mcpu=cortex-m4
CFLAGS += -mthumb -mabi=aapcs
CFLAGS += -Wall -Werror
CFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16
# keep every function in a separate section, this allows linker to discard unused ones
CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
CFLAGS += -fno-builtin -fshort-enums
CFLAGS += -flto
ifeq ($(DEBUG_BUILD), 1)
    CFLAGS += -g3
else
    CFLAGS += -O3
endif

# C++ flags common to all targets
CXXFLAGS += $(CFLAGS)
CXXFLAGS += -std=c++17
CXXFLAGS += -fno-rtti -fno-exceptions

# Assembler flags common to all targets
ASMFLAGS += -mcpu=cortex-m4
ASMFLAGS += -mthumb -mabi=aapcs
ASMFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16
ASMFLAGS += -DCUSTOM_BOARD_INC=dwm1001_board
ASMFLAGS += -DCONFIG_GPIO_AS_PINRESET
ASMFLAGS += -DFLOAT_ABI_HARD
ASMFLAGS += -DNRF52
ASMFLAGS += -DNRF52832_XXAA
ASMFLAGS += -DNRF52_PAN_74
ASMFLAGS += -DNRF_SD_BLE_API_VERSION=6
ASMFLAGS += -DS132
ASMFLAGS += -DSOFTDEVICE_PRESENT
ASMFLAGS += -DSWI_DISABLE0
ifeq ($(DEBUG_BUILD), 1)
    ASMFLAGS += -g3
endif

# Linker flags
LDFLAGS += $(OPT)
LDFLAGS += -mthumb -mabi=aapcs -L${NRF_SDK_ROOT}/modules/nrfx/mdk -T$(LINKER_SCRIPT)
LDFLAGS += -mcpu=cortex-m4
LDFLAGS += -mfloat-abi=hard -mfpu=fpv4-sp-d16
# let linker dump unused sections
LDFLAGS += -Wl,--gc-sections
# use newlib in nano version
LDFLAGS += --specs=nano.specs

ifeq ($(DEBUG_BUILD), 1)
    CFLAGS += -DEBUG_BUILD
    CXXFLAGS += -DEBUG_BUILD
endif

nrf52832_xxaa: CFLAGS += -D__HEAP_SIZE=8192
nrf52832_xxaa: CFLAGS += -D__STACK_SIZE=8192
nrf52832_xxaa: ASMFLAGS += -D__HEAP_SIZE=8192
nrf52832_xxaa: ASMFLAGS += -D__STACK_SIZE=8192

# Add standard libraries at the very end of the linker input, after all objects
# that may need symbols provided by these libraries.
LIB_FILES += -lc -lnosys -lm


.PHONY: default help

# Default target - first one defined
default: nrf52832_xxaa

# Print all targets that can be built
help:
	@echo following targets are available:
	@echo		nrf52832_xxaa
	@echo		flash_softdevice
	@echo		sdk_config - starting external tool for editing sdk_config.h
	@echo		flash      - flashing binary

TEMPLATE_PATH := ${NRF_SDK_ROOT}/components/toolchain/gcc

include $(TEMPLATE_PATH)/Makefile.common

$(foreach target, $(TARGETS), $(call define_target, $(target)))

.PHONY: flash flash_softdevice erase
BOARD_ID ?= $(shell nrfjprog -i | head -n 1)

# Flash the program
flash: default
	@echo Flashing: $(OUTPUT_DIRECTORY)/nrf52832_xxaa.hex
	nrfjprog -s $(BOARD_ID) -f nrf52 --program $(OUTPUT_DIRECTORY)/nrf52832_xxaa.hex --sectorerase
	nrfjprog -s $(BOARD_ID) -f nrf52 --reset

# Flash softdevice
flash_softdevice:
	@echo Flashing: s132_nrf52_6.1.0_softdevice.hex
	nrfjprog -s $(BOARD_ID) -f nrf52 --program ${NRF_SDK_ROOT}/components/softdevice/s132/hex/s132_nrf52_6.1.0_softdevice.hex --sectorerase
	nrfjprog -s $(BOARD_ID) -f nrf52 --reset

erase:
	nrfjprog -s $(BOARD_ID) -f nrf52 --eraseall

SDK_CONFIG_FILE := ../config/sdk_config.h
CMSIS_CONFIG_TOOL := ${NRF_SDK_ROOT}/external_tools/cmsisconfig/CMSIS_Configuration_Wizard.jar
sdk_config:
	java -jar $(CMSIS_CONFIG_TOOL) $(SDK_CONFIG_FILE)
